---
title: "A-21017-2021-12-02"
author: "By 21017"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Question
Write an Rcpp function for Exercise 9.8( page 278, Statistical Computing with R).\

- Compare the corresponding generated random numbers with pure R language using the function "qqplot".\
- Compare the computation time of the two functions with the function "microbenchmark".\
- Comments your results.

## Answer
This example appears in [40]. Consider the bivariate denstiy
$$f(x,y) \propto \binom{n}{x}y^{x+a-1}(1-y)^{n-x+b-1},\quad x=0,1,\cdots,n,0\le y \le 1.$$
It can be shown (see e.g. [23]) that for fixed $a,b,n$, the conditional distributions are Binomial($n,y$) and Beta($x+a,n-x+b$). Use the Gibbs sampler to generate a chain with target joint density $f(x,y)$.

**C++**\
条件密度$x|y \sim Binomial(n,y) ,\quad y|x \sim Beta(x+a,n-x+b)$，由此使用Gibbs样本生成器生成二元分布
```{r,eval=FALSE}
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
NumericMatrix gibbs_sampleC(int N, double a, double b, int n, int thin) {
  NumericMatrix mat(N, 2);
  double x = floor(n/2), y = 0.5;
  for(int i = 0; i < N; i++) {
    for(int j = 0; j < thin; j++) {
      x = rbinom(1, n, y )[0];
      y = rbeta(1, x+a, n-x+b)[0];
    }
    mat(i, 0) = x;
    mat(i, 1) = y;
  }
  return(mat);
}
```

```{r,warning=FALSE}
library(Rcpp)
dir_cpp <- '../Rcpp/'
sourceCpp(paste0(dir_cpp,"gibbs_sampleC.cpp"))
```


**R language:**

```{r}
gibbs_sampleR <- function(N,a,b,n, thin){ # N is the length of chain
  X <- matrix(0,nrow = N,ncol = 2) # 样本阵
  x <- floor(n/2)
  y <- 0.5    # 初始值
  for(i in 2:N){
    for(j in 1:thin){
      x <- rbinom(1,size = n,prob = y) # 更新x
      y <- rbeta(1,x+a,n-x+b)          # 更新y
    }
    X[i,] <- c(x,y)
  }
  return(X)
}
```

**qqplot:**
```{r}
gibbsC <- gibbs_sampleC(2000,1,4,50,10)
gibbsR <- gibbs_sampleR(2000,1,4,50,10)

par(mfrow=c(1,2))
qqplot(gibbsC[,1],gibbsR[,1],pch=16,cex=0.7,main="compare x")  # 比较x
abline(a=0,b=1,col = "blue")
qqplot(gibbsC[,2],gibbsR[,2],pch=16,cex=0.7,main="compare y")  # 比较y
abline(a=0,b=1,col = "blue")
```

可以看出用两种方法生成的结果比较相近。\

**time:**
```{r,warning=FALSE}
library(microbenchmark)
ts <- microbenchmark(gibbsR=gibbs_sampleR(2000,1,4,50,10),gibbsC=gibbs_sampleC(2000,1,4,50,10))
summary(ts)[,c(1,3,5,6)]
```

**Comments:**
通过QQ图的对比，gibbsR和gibbsC生成的数据非常接近，但是运行时间gibbsC要比gibbsR快很多


